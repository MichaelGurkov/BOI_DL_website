---
title: "Optimization methods"
---

```{r set_up_python, echo=FALSE}
#|echo: FALSE

if (Sys.getenv("USERPROFILE") == "C:\\Users\\internet"){
  
  python_path = paste0("C:\\Users\\internet\\AppData\\Local",
                       "\\Programs\\Python\\Python312\\python.exe")
} else {
  
  python_path = paste0("C:\\Users\\Home\\AppData\\Local",
                       "\\Programs\\Python\\Python312\\python.exe")
}

reticulate::use_python(python_path)

```

```{python import_libraries}
#| code-fold: true
#| code-summary: "Show the code"


import pandas as pd

import numpy as np

import os


from func_package.tests import (test_forward_propagation,
test_backward_propagation, test_model)

from func_package.model import model

from func_package.utils import predict_nn

from sklearn.metrics import accuracy_score

# Plot predictions
import matplotlib.pyplot as plt

```


```{python import_data}

raw_data = pd.read_csv("data\\cluster_moons.csv")

X = raw_data.iloc[:,0:2].copy()

X = X.to_numpy().T.copy()

y = raw_data.iloc[:,2].copy()

y = y.to_numpy().reshape(1, -1).copy()

```

```{python plot_data}

plt.scatter(X.iloc[:,0],X.iloc[:,1], c=y)
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.title('Scatter Plot of Feature 1 and Feature 2')
plt.show()


```



# Gradient descent


```{python gd_model}

layer_dims = [2, 4, 1]

gd_parameters, gd_costs = model(
    X, y, layer_dims,
    optimizer="gd",
    learning_rate=0.01,
    num_epochs=2000,
    batch_size=None,
    print_cost=False,
    print_every=200
)

```

```{python gd_predictions}

pred_gd = predict_nn(X, gd_parameters)

accuracy_score(pred_gd.flatten(),y.flatten())

```



# Stochastic gradient descent


```{python sgd_model}

sgd_parameters, sgd_costs = model(
    X, y, layer_dims,
    optimizer="gd",
    learning_rate=0.01,
    num_epochs=2000,
    batch_size=32,
    print_cost=False,
    print_every=200
)

```

```{python gd_predictions}

pred_sgd = predict_nn(X, sgd_parameters)

accuracy_score(pred_sgd.flatten(),y.flatten())

```



# Momentum

```{python momentum_model}

momentum_parameters, momentum_costs = model(
    X, y, layer_dims,
    optimizer="momentum",
    learning_rate=0.01,
    num_epochs=2000,
    batch_size=None,
    print_cost=False,
    print_every=200,
    beta = 0.9
)

```

```{python momentum_predictions}

pred_momentum = predict_nn(X, momentum_parameters)

accuracy_score(pred_momentum.flatten(),y.flatten())

```


# RMSProp


```{python rmsprop_model}

rmsprop_parameters, rmsprop_costs = model(
    X, y, layer_dims,
    optimizer="rmsprop",
    learning_rate=0.001,
    num_epochs=2000,
    batch_size=None,
    print_cost=False,
    print_every=200,
    beta2 = 0.9,
    epsilon = 1 * 10 ** (-8)
)

```

```{python rmsprop_predictions}

pred_rmsprop = predict_nn(X, rmsprop_parameters)

accuracy_score(pred_rmsprop.flatten(),y.flatten())

```


# Adam


```{python adam_model}

adam_parameters, adam_costs = model(
    X, y, layer_dims,
    optimizer="adam",
    learning_rate=0.001,
    num_epochs=2000,
    batch_size=None,
    print_cost=False,
    print_every=200,
    beta1 = 0.9,
    beta2 = 0.999,
    epsilon = 1 * 10 ** (-8)
)

```

```{python rmsprop_predictions}

pred_adam = predict_nn(X, adam_parameters)

accuracy_score(pred_adam.flatten(),y.flatten())

```


