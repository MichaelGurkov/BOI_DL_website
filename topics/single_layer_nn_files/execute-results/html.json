{
  "hash": "3492177d769a525de8d66b3bfc9360e2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Single layer Neural Network\"\n---\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n\nimport pandas as pd\n\nimport numpy as np\n\nimport os\n\n```\n:::\n\n\n\n\n# **The Algorithm**\n\n1. **Define the Model Structure**  \n   - Weights (`w`) and bias (`b`).\n\n2. **Initialize Model Parameters**  \n   - Set initial values for `w` and `b`.\n\n3. **Training Loop (Gradient Descent Iteration)**  \n   - **Compute gradients (backward propagation)**.  \n   - Update parameters (gradient descent).  \n\n4. **Return Trained Parameters**  \n   - Output optimized `w` and `b`.  \n\n\n\n# Functions definition\n\n#### Auxiliary functions\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ndef initialize_parameters(X,y, num_hidden_layer_neurons = 4):\n\n  scaling_constant = 0.01\n \n  num_features = X.shape[1]\n\n  num_output_layers = y.shape[0]\n\n  weights_hidden = np.random.randn(num_hidden_layer_neurons,num_features) * scaling_constant\n\n  weights_output = np.random.randn(num_hidden_layer_neurons, 1)* scaling_constant\n\n  bias_hidden = np.zeros((num_hidden_layer_neurons,1))\n\n  bias_output = np.zeros((1, 1))\n\n  parameters = {\"weights_hidden\": weights_hidden,\"bias_hidden\":bias_hidden,\n                \"weights_output\": weights_output,\"bias_output\":bias_output}\n\n  return parameters\n\n\ndef forward_propagation(X, parameters):\n  \n  num_samples = X.shape[0]\n\n  num_features = X.shape[1]\n  \n  num_features = num_features\n\n  weights_hidden = parameters[\"weights_hidden\"]\n  weights_output = parameters[\"weights_output\"]\n\n  bias_hidden = parameters[\"bias_hidden\"]\n  bias_output = parameters[\"bias_output\"]\n\n  values_hidden = np.dot(weights_hidden, X.T) + bias_hidden # dims: (num_of_hidden_neurons,num_samples)\n\n  values_hidden_active = np.tanh(values_hidden) # dims: (num_of_hidden_neurons,num_samples)\n\n  values_output = np.dot(weights_output.T, values_hidden_active) + bias_output # dims: (num_samples)\n\n  values_output_active = np.tanh(values_output)\n\n  predictions = values_output_active\n  \n  current_network_values = {\"values_hidden\": values_hidden,\n                            \"values_hidden_active\": values_hidden_active,\n                            \"values_output\": values_output,\n                            \"values_output_active\": values_output_active}\n  \n  return predictions, current_network_values\n\n\ndef backward_propagation(parameters, current_network_values, X, y):\n  weights_hidden = parameters[\"weights_hidden\"]\n  weights_output = parameters[\"weights_output\"]\n\n  bias_hidden = parameters[\"bias_hidden\"]\n  bias_output = parameters[\"bias_output\"]\n\n  values_hidden_active = current_network_values[\"values_hidden_active\"]\n\n  values_output = current_network_values[\"values_output\"]\n\n  values_output_active = current_network_values[\"values_output_active\"]\n\n  num_samples = X.shape[0]\n\n  #####calculate gradients\n  \n  y = y.values.reshape(1,-1)\n\n  d_values_output = values_output_active - y # dims: (num_samples,1)\n  \n  d_weights_output = (1 / num_samples) * np.dot(values_hidden_active, d_values_output.T) # dims: (num_of_hidden_neurons, 1)\n\n  d_bias_output = (1 / num_samples) * np.sum(d_values_output,axis = 1, keepdims=True)\n\n \n  d_values_hidden = np.dot(weights_output, d_values_output) *(1 - np.power(values_hidden_active, 2))\n\n  d_weights_hidden = (1 / num_samples) * np.dot(d_values_hidden, X)\n\n  d_bias_hidden = (1 / num_samples) * np.sum(d_values_hidden,axis = 1, keepdims=True) \n\n  \n  grads = {\"d_weights_hidden\": d_weights_hidden, \"d_bias_hidden\": d_bias_hidden,\n           \"d_weights_output\": d_weights_output, \"d_bias_output\": d_bias_output}\n  \n  return grads\n  \n\ndef update_parameters(parameters, grads, learning_rate = 1.2):\n\n  weights_hidden = parameters[\"weights_hidden\"]\n  weights_output = parameters[\"weights_output\"]\n\n  bias_hidden = parameters[\"bias_hidden\"]\n  bias_output = parameters[\"bias_output\"]\n\n  d_weights_hidden = grads[\"d_weights_hidden\"]\n  d_bias_hidden = grads[\"d_bias_hidden\"]\n\n  d_weights_output = grads[\"d_weights_output\"]\n  d_bias_output = grads[\"d_bias_output\"]\n\n  weights_hidden = weights_hidden - learning_rate * d_weights_hidden\n  bias_hidden = bias_hidden - learning_rate * d_bias_hidden\n\n  weights_output = weights_output - learning_rate * d_weights_output\n  bias_output = bias_output - learning_rate * d_bias_output\n\n  parameters = {\"weights_hidden\": weights_hidden,\"bias_hidden\":bias_hidden,\n                \"weights_output\": weights_output,\"bias_output\":bias_output}\n  \n  return parameters\n\n\ndef predict(parameters, X, threshold = 0.5):\n  \n  predictions, current_network_values = forward_propagation(X, parameters)\n  \n  predictions = pd.Series(predictions.ravel())\n\n  predictions = predictions.apply(lambda x: 1 if x > threshold else 0)\n  \n  return predictions\n```\n:::\n\n\n\n\n\n\n#### Neural network implementation\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ndef train_neural_network(X,y,num_iterations = 100):\n  # Initialize the model's parameters\n  # Loop:\n  #  - Implement forward propagation to get the predictions\n  #  - Implement backward propagation to get the gradients\n  #  - Update parameters (gradient descent)\n\n  parameters = initialize_parameters(X,y)\n\n  for iteration in range(num_iterations):\n\n    predictions, current_network_values = forward_propagation(X.copy(), parameters)\n\n    grads = backward_propagation(parameters, current_network_values, X.copy(), y.copy())\n\n    parameters = update_parameters(parameters, grads)\n\n  return parameters\n```\n:::\n\n\n\n\n\n\n\n# Application on planar data\n\n#### Import and preprocess data\n\n\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n\nraw_df = pd.read_csv(os.path.join(os.path.expanduser(\"~\\\\Documents\\\\BOI_DL_website\"), \"data\\\\planar_data.csv\"))\n\nfeatures = [\"x_coord\",\"y_coord\"]\n\ntarget = \"label\"\n\nX = raw_df[features].copy()\n\nY = raw_df[target].copy()\n\n```\n:::\n\n\n\n\n\n#### Training neural network\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n\nnn_params = train_neural_network(X = X,y = Y,num_iterations = 10000)\n\n```\n:::\n\n\n\n\n#### Predictions on test set\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom sklearn.metrics import accuracy_score\n\nnn_predictions = predict(nn_params, X)\n\nnn_score = accuracy_score(Y, nn_predictions)\n\nprint(f\"Neural network score is {np.round(nn_score,4)}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeural network score is 0.885\n```\n\n\n:::\n:::\n\n\n\n\n\n### Comparison with Logistic regression\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nfrom sklearn.linear_model import LogisticRegression\n\nlog_reg = LogisticRegression()\n\nlog_reg.fit(X,Y)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<style>#sk-container-id-1 {\n  /* Definition of color scheme common for light and dark mode */\n  --sklearn-color-text: black;\n  --sklearn-color-line: gray;\n  /* Definition of color scheme for unfitted estimators */\n  --sklearn-color-unfitted-level-0: #fff5e6;\n  --sklearn-color-unfitted-level-1: #f6e4d2;\n  --sklearn-color-unfitted-level-2: #ffe0b3;\n  --sklearn-color-unfitted-level-3: chocolate;\n  /* Definition of color scheme for fitted estimators */\n  --sklearn-color-fitted-level-0: #f0f8ff;\n  --sklearn-color-fitted-level-1: #d4ebff;\n  --sklearn-color-fitted-level-2: #b3dbfd;\n  --sklearn-color-fitted-level-3: cornflowerblue;\n\n  /* Specific color for light theme */\n  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-icon: #696969;\n\n  @media (prefers-color-scheme: dark) {\n    /* Redefinition of color scheme for dark theme */\n    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-icon: #878787;\n  }\n}\n\n#sk-container-id-1 {\n  color: var(--sklearn-color-text);\n}\n\n#sk-container-id-1 pre {\n  padding: 0;\n}\n\n#sk-container-id-1 input.sk-hidden--visually {\n  border: 0;\n  clip: rect(1px 1px 1px 1px);\n  clip: rect(1px, 1px, 1px, 1px);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n#sk-container-id-1 div.sk-dashed-wrapped {\n  border: 1px dashed var(--sklearn-color-line);\n  margin: 0 0.4em 0.5em 0.4em;\n  box-sizing: border-box;\n  padding-bottom: 0.4em;\n  background-color: var(--sklearn-color-background);\n}\n\n#sk-container-id-1 div.sk-container {\n  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n     but bootstrap.min.css set `[hidden] { display: none !important; }`\n     so we also need the `!important` here to be able to override the\n     default hidden behavior on the sphinx rendered scikit-learn.org.\n     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n  display: inline-block !important;\n  position: relative;\n}\n\n#sk-container-id-1 div.sk-text-repr-fallback {\n  display: none;\n}\n\ndiv.sk-parallel-item,\ndiv.sk-serial,\ndiv.sk-item {\n  /* draw centered vertical line to link estimators */\n  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n  background-size: 2px 100%;\n  background-repeat: no-repeat;\n  background-position: center center;\n}\n\n/* Parallel-specific style estimator block */\n\n#sk-container-id-1 div.sk-parallel-item::after {\n  content: \"\";\n  width: 100%;\n  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n  flex-grow: 1;\n}\n\n#sk-container-id-1 div.sk-parallel {\n  display: flex;\n  align-items: stretch;\n  justify-content: center;\n  background-color: var(--sklearn-color-background);\n  position: relative;\n}\n\n#sk-container-id-1 div.sk-parallel-item {\n  display: flex;\n  flex-direction: column;\n}\n\n#sk-container-id-1 div.sk-parallel-item:first-child::after {\n  align-self: flex-end;\n  width: 50%;\n}\n\n#sk-container-id-1 div.sk-parallel-item:last-child::after {\n  align-self: flex-start;\n  width: 50%;\n}\n\n#sk-container-id-1 div.sk-parallel-item:only-child::after {\n  width: 0;\n}\n\n/* Serial-specific style estimator block */\n\n#sk-container-id-1 div.sk-serial {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: var(--sklearn-color-background);\n  padding-right: 1em;\n  padding-left: 1em;\n}\n\n\n/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\nclickable and can be expanded/collapsed.\n- Pipeline and ColumnTransformer use this feature and define the default style\n- Estimators will overwrite some part of the style using the `sk-estimator` class\n*/\n\n/* Pipeline and ColumnTransformer style (default) */\n\n#sk-container-id-1 div.sk-toggleable {\n  /* Default theme specific background. It is overwritten whether we have a\n  specific estimator or a Pipeline/ColumnTransformer */\n  background-color: var(--sklearn-color-background);\n}\n\n/* Toggleable label */\n#sk-container-id-1 label.sk-toggleable__label {\n  cursor: pointer;\n  display: block;\n  width: 100%;\n  margin-bottom: 0;\n  padding: 0.5em;\n  box-sizing: border-box;\n  text-align: center;\n}\n\n#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n  /* Arrow on the left of the label */\n  content: \"▸\";\n  float: left;\n  margin-right: 0.25em;\n  color: var(--sklearn-color-icon);\n}\n\n#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n  color: var(--sklearn-color-text);\n}\n\n/* Toggleable content - dropdown */\n\n#sk-container-id-1 div.sk-toggleable__content {\n  max-height: 0;\n  max-width: 0;\n  overflow: hidden;\n  text-align: left;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-1 div.sk-toggleable__content.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-1 div.sk-toggleable__content pre {\n  margin: 0.2em;\n  border-radius: 0.25em;\n  color: var(--sklearn-color-text);\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n  /* unfitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n  /* Expand drop-down */\n  max-height: 200px;\n  max-width: 100%;\n  overflow: auto;\n}\n\n#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n  content: \"▾\";\n}\n\n/* Pipeline/ColumnTransformer-specific style */\n\n#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator-specific style */\n\n/* Colorize estimator box */\n#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n#sk-container-id-1 div.sk-label label {\n  /* The background is the default theme color */\n  color: var(--sklearn-color-text-on-default-background);\n}\n\n/* On hover, darken the color of the background */\n#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n/* Label box, darken color on hover, fitted */\n#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator label */\n\n#sk-container-id-1 div.sk-label label {\n  font-family: monospace;\n  font-weight: bold;\n  display: inline-block;\n  line-height: 1.2em;\n}\n\n#sk-container-id-1 div.sk-label-container {\n  text-align: center;\n}\n\n/* Estimator-specific */\n#sk-container-id-1 div.sk-estimator {\n  font-family: monospace;\n  border: 1px dotted var(--sklearn-color-border-box);\n  border-radius: 0.25em;\n  box-sizing: border-box;\n  margin-bottom: 0.5em;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-1 div.sk-estimator.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n/* on hover */\n#sk-container-id-1 div.sk-estimator:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-1 div.sk-estimator.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Specification for estimator info (e.g. \"i\" and \"?\") */\n\n/* Common style for \"i\" and \"?\" */\n\n.sk-estimator-doc-link,\na:link.sk-estimator-doc-link,\na:visited.sk-estimator-doc-link {\n  float: right;\n  font-size: smaller;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1em;\n  height: 1em;\n  width: 1em;\n  text-decoration: none !important;\n  margin-left: 1ex;\n  /* unfitted */\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n  color: var(--sklearn-color-unfitted-level-1);\n}\n\n.sk-estimator-doc-link.fitted,\na:link.sk-estimator-doc-link.fitted,\na:visited.sk-estimator-doc-link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\ndiv.sk-estimator:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\ndiv.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n/* Span, style for the box shown on hovering the info icon */\n.sk-estimator-doc-link span {\n  display: none;\n  z-index: 9999;\n  position: relative;\n  font-weight: normal;\n  right: .2ex;\n  padding: .5ex;\n  margin: .5ex;\n  width: min-content;\n  min-width: 20ex;\n  max-width: 50ex;\n  color: var(--sklearn-color-text);\n  box-shadow: 2pt 2pt 4pt #999;\n  /* unfitted */\n  background: var(--sklearn-color-unfitted-level-0);\n  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n}\n\n.sk-estimator-doc-link.fitted span {\n  /* fitted */\n  background: var(--sklearn-color-fitted-level-0);\n  border: var(--sklearn-color-fitted-level-3);\n}\n\n.sk-estimator-doc-link:hover span {\n  display: block;\n}\n\n/* \"?\"-specific style due to the `<a>` HTML tag */\n\n#sk-container-id-1 a.estimator_doc_link {\n  float: right;\n  font-size: 1rem;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1rem;\n  height: 1rem;\n  width: 1rem;\n  text-decoration: none;\n  /* unfitted */\n  color: var(--sklearn-color-unfitted-level-1);\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n}\n\n#sk-container-id-1 a.estimator_doc_link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\n#sk-container-id-1 a.estimator_doc_link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n}\n</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;LogisticRegression<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.linear_model.LogisticRegression.html\">?<span>Documentation for LogisticRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>LogisticRegression()</pre></div> </div></div></div></div>\n```\n\n:::\n:::\n\n\n\n\n\n#### Auxiliary plotting functions\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\ndef generate_grid(x_min, x_max, y_min, y_max, step_size=0.02):\n    \"\"\"\n    Generates a grid of points covering the given range with the specified step size.\n    \n    Parameters:\n    - x_min, x_max: float, range for x-axis.\n    - y_min, y_max: float, range for y-axis.\n    - step_size: float, resolution of the grid.\n    \n    Returns:\n    - XX, YY: Meshgrid arrays for plotting.\n    - grid_points: Flattened array of grid coordinates.\n    \"\"\"\n    xx, yy = np.meshgrid(np.arange(x_min, x_max, step_size),\n                         np.arange(y_min, y_max, step_size))\n    grid_points = np.c_[xx.ravel(), yy.ravel()]  # Flatten the grid\n    \n    return xx, yy, grid_points\n\ndef plot_decision_boundary(xx, yy, pred_grid, X, y, title, cmap=plt.cm.RdBu):\n    \"\"\"\n    Plots the decision boundary for a given prediction grid.\n    \n    Parameters:\n    - xx, yy: Meshgrid arrays for plotting.\n    - pred_grid: Prediction values reshaped to match xx and yy.\n    - X: Original dataset (features).\n    - y: Labels for the dataset.\n    - title: Title of the plot.\n    - cmap: Colormap for visualization.\n    \"\"\"\n    plt.figure(figsize=(8, 6))\n    \n    # Plot the decision boundary\n    plt.contourf(xx, yy, pred_grid, alpha=0.6, cmap=cmap)\n    \n    # Scatter plot of actual data points\n    plt.scatter(X[:, 0], X[:, 1], c=y, edgecolor=\"k\", cmap=cmap, s=40)\n    \n    plt.title(title)\n    plt.xlabel(\"Feature 1\")\n    plt.ylabel(\"Feature 2\")\n    plt.show()\n\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nxx, yy, grid_points  = generate_grid(x_min = X[\"x_coord\"].min(), x_max = X[\"x_coord\"].max(),\ny_min = X[\"y_coord\"].min(), y_max = X[\"y_coord\"].max())\n\n\nnn_pred_grid = predict(nn_params, grid_points)\n\nnn_pred_grid = np.array(nn_pred_grid).reshape(xx.shape)\n\nlog_reg_pred_grid = log_reg.predict(pd.DataFrame(grid_points, columns=X.columns))\n\nlog_reg_pred_grid = np.array(log_reg_pred_grid).reshape(xx.shape)\n```\n:::\n\n\n\n\nThis is how actual data looks like\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nplt.clf()\n\nplt.scatter(X[\"x_coord\"], X[\"y_coord\"], c=Y, s=40, cmap=plt.cm.Spectral);\n\nplt.title(\"Actual data\")\n\nplt.show()\n```\n\n::: {.cell-output-display}\n![](single_layer_nn_files/figure-html/plot_actual_data-1.png){width=672}\n:::\n:::\n\n\n\n\nThis is a classification by logistic regression\n\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nplot_decision_boundary(xx, yy, log_reg_pred_grid, X.to_numpy(),\nY.to_numpy(),title=\"Logistic Regression Decision Boundary\")\n```\n\n::: {.cell-output-display}\n![](single_layer_nn_files/figure-html/plot_log_reg_predictions-3.png){width=768}\n:::\n:::\n\n\n\n\n\nAnd this is a classification by neural network\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nplot_decision_boundary(xx, yy, nn_pred_grid, X.to_numpy(),\nY.to_numpy(),title=\"Neural Network Decision Boundary\")\n```\n\n::: {.cell-output-display}\n![](single_layer_nn_files/figure-html/plot_nn_predictions-5.png){width=768}\n:::\n:::\n",
    "supporting": [
      "single_layer_nn_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}